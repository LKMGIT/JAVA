인터페이스는 구현할 기능에 대한 일반화

여기서 일반화란?
어떤 객체던 이 인터페이스가 같은 기능을 하는것

public class 구현클래스명 implements interfaceA, interfaceB...{}

추상클래스와 인터페이스의 차이점은 무엇인가?
추상 클래스는 추상의 개념이 좀 더 큼
인터페이스는 작은 기능단위를 추상화

public class AAA extends AAAB implements 날다, 먹다, 소리내다{...}
-> AAA라는 클래스는 AAAB라는 클래스의 필드와 기능을 공유하며
    또한 날고 먹고 소리내는 기능을 사용할 수 있다. 라고 표현 가능

날고 먹고 소리내는 기능을 AAA에 맞게끔 구현해주어야 한다. (필수)

인터페이스 안에는
1. 상수 필드 public static final
2. 추상 메서드 public (abstract) 리턴 유형 메서드명 ();
3. default 메소드 (유일한 구현 메서드)
4. private 메소드
   private static 메소드
5. static 메소드
=============================================

인터페이스 상속
인터페이스는 인터페이스 끼리 상속 가능하다.
interface A extends B, C {...}

public class 구현 클래스 implements A {...}

=============================================
오늘 할거
1. 타입 변환
인터페이스와 구현 클래스간에 발생한다.
인터페이스 변수에 구현 객체를 대입하면
구현 객체는 인터페이스 타입으로 자동 타입 변환된다.
인터페이스 변수 = 구현 객체;
RemoteController rc = new Television();

강제타입 변환
() ==> 캐스팅 기호를 사용해서 인터페이스 타입을 구현 클래스 타입으로 변환 가능
구현 클래스 변수 = (구현클래스) 인터페이스 변수
구현객체가 인터페이스 타입으로 자동변환 되면
인터페이스에 선언된 메소드만 사용가능하다.

if(rc instanceof Television){
    rc = (Television) rc;
    rc. 메소드
}
현업에서는 주로 상속 보다는 인터페이스를 통한 다형성을 구현한다.

다형성이라는 것은 사용방법은 동일하지만 다양한 결과가 나오는 성질



다형성 제공 (타입 체크)
예외처리
중첩 클래스








