함수형 인터페이스
자바는 람다 표현식으로 구현할 수 있는 타입을 정의하기 위해
함수형 인터페이스 개념을 사용한다

람다 표현식은 함수형 인터페이스를 인스턴스화 하는데 사용되는 익명 함수
자바에서는 함수형 인터페이스는 하나의 추상메서드만 포함하는 인터페이스이다.
람다 구현식은 이 단일 메서드의 구현을 제공할 수 있어. 보다 간결하고 통합된 코드 베이스를 가능하게 한다.

주요 함수형 인터페이스
1. Predicate<T> : 하나의 인수에 대한 boolean 값을 가지는 함수
    Predicate <String> isEmpty = str -> str.isEmpty();

2. Function<T,R> : T 타입의 인수를 받아 R 타입 결과를 반환하는 함수
    Function<String, Integer> length = str -> str.length();

3. Consumer<T> : 단일 입력을 받아서 수락(사용)하고 결과를 반환하지 않는 함수

4. Suppiler<T> : 값을 반환하는 메서드를 제공하는 결과의 함수
    Suppiler<String> greet = () -> "Hello, lambda";

5. BiFunction<T, U, R> : 두 개의 argument를 받아 결과를 생성하는 함수

간결한 (보일러플레이트 코드를 줄여준다) 별도의 클래스나 익명클래스르 만들 필용 없이
간단한 콜백이나 함수형 인터페이스를 구현할 수 있게 한다.

기능향상